<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.liwenye.dao.PomosMapper">
  <resultMap id="BaseResultMap" type="cn.liwenye.bean.Pomos">
    <result column="uuid" jdbcType="VARCHAR" property="uuid" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="started_at" jdbcType="TIMESTAMP" property="startedAt" />
    <result column="ended_at" jdbcType="TIMESTAMP" property="endedAt" />
    <result column="local_started_at" jdbcType="TIMESTAMP" property="localStartedAt" />
    <result column="local_ended_at" jdbcType="TIMESTAMP" property="localEndedAt" />
    <result column="length" jdbcType="INTEGER" property="length" />
    <result column="abandoned" jdbcType="BIT" property="abandoned" />
    <result column="manual" jdbcType="BIT" property="manual" />
  </resultMap>
  <resultMap id="BooklistResultMap" type="cn.liwenye.bean.Booklist">
    <result column="description" jdbcType="VARCHAR" property="book" />
    <result column="local_ended_at" jdbcType="TIMESTAMP" property="lastDay" />
    <result column="total_pomos" jdbcType="INTEGER" property="totalPomos"/>
  </resultMap>
  <resultMap id="LastRecordResultMap" type="cn.liwenye.bean.LastRecord">
    <result column="date_of_last_record" jdbcType="TIMESTAMP" property="dateOfLastRecord" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uuid, created_at, updated_at, description, started_at, ended_at, local_started_at, 
    local_ended_at, length, abandoned, manual
  </sql>
  <select id="selectByExample" parameterType="cn.liwenye.bean.PomosExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pomos
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.liwenye.bean.PomosExample">
    delete from pomos
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.liwenye.bean.Pomos">
    insert into pomos (uuid, created_at, updated_at, 
      description, started_at, ended_at, 
      local_started_at, local_ended_at, length, 
      abandoned, manual)
    select #{uuid,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP},
      #{description,jdbcType=VARCHAR}, #{startedAt,jdbcType=TIMESTAMP}, #{endedAt,jdbcType=TIMESTAMP}, 
      #{localStartedAt,jdbcType=TIMESTAMP}, #{localEndedAt,jdbcType=TIMESTAMP}, #{length,jdbcType=INTEGER}, 
      #{abandoned,jdbcType=BIT}, #{manual,jdbcType=BIT}
      <!--
      from pomos a where not exists
        (select null from pomos b where b.uuid = #{uuid,jdbcType=VARCHAR})
        -->
  </insert>
  <insert id="insertSelective" parameterType="cn.liwenye.bean.Pomos">
    insert into pomos
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        uuid,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="startedAt != null">
        started_at,
      </if>
      <if test="endedAt != null">
        ended_at,
      </if>
      <if test="localStartedAt != null">
        local_started_at,
      </if>
      <if test="localEndedAt != null">
        local_ended_at,
      </if>
      <if test="length != null">
        length,
      </if>
      <if test="abandoned != null">
        abandoned,
      </if>
      <if test="manual != null">
        manual,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="startedAt != null">
        #{startedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="endedAt != null">
        #{endedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="localStartedAt != null">
        #{localStartedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="localEndedAt != null">
        #{localEndedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="length != null">
        #{length,jdbcType=INTEGER},
      </if>
      <if test="abandoned != null">
        #{abandoned,jdbcType=BIT},
      </if>
      <if test="manual != null">
        #{manual,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.liwenye.bean.PomosExample" resultType="java.lang.Long">
    select count(*) from pomos
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pomos
    <set>
      <if test="record.uuid != null">
        uuid = #{record.uuid,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.startedAt != null">
        started_at = #{record.startedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endedAt != null">
        ended_at = #{record.endedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.localStartedAt != null">
        local_started_at = #{record.localStartedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.localEndedAt != null">
        local_ended_at = #{record.localEndedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.length != null">
        length = #{record.length,jdbcType=INTEGER},
      </if>
      <if test="record.abandoned != null">
        abandoned = #{record.abandoned,jdbcType=BIT},
      </if>
      <if test="record.manual != null">
        manual = #{record.manual,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pomos
    set uuid = #{record.uuid,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      description = #{record.description,jdbcType=VARCHAR},
      started_at = #{record.startedAt,jdbcType=TIMESTAMP},
      ended_at = #{record.endedAt,jdbcType=TIMESTAMP},
      local_started_at = #{record.localStartedAt,jdbcType=TIMESTAMP},
      local_ended_at = #{record.localEndedAt,jdbcType=TIMESTAMP},
      length = #{record.length,jdbcType=INTEGER},
      abandoned = #{record.abandoned,jdbcType=BIT},
      manual = #{record.manual,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectBooklist"  resultMap="BooklistResultMap">
    select a.* from
      (select description,max(local_ended_at) as local_ended_at,count(uuid) as total_pomos from pomotodo.pomos
        where description like '%阅读%《%'
        group by description) as a
        order by a.local_ended_at DESC
  </select>
  <update id="deleteDuplicatedRecord" statementType="CALLABLE" >
    {
    call delete_duplicated_record
    }
  </update>
  <select id="selectLastRecord"  resultMap="LastRecordResultMap">
    select max(local_ended_at) as date_of_last_record
    from pomos
  </select>
</mapper>